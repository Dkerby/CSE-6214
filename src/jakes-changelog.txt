
I changed around the design of the code a little bit to reduce the complexity of it.





Here's the basics:
	
	*Algorithm creates and holds the State or the NumberList objects. It uses them by performing
	 operations on them to help sort the data in NumberList and update the metadata in State.

	*I added a bunch of methods to Algorithm to help turn it into a fully-actualized API


	*I moved the NumberList object into the State object as a datamember so that the 
	 sorting algorithms can see and operate on the data through the State object. 
	 This means that the State object is the only thing the sorting algorithms 
 	 need to do their job.


	*Each individual sorting algorithm has been moved into its own class/file in the sortlib.
	 These algorithms get the State object passed into them when they are created, so that they
	 can store the i and j values in state. This way, the i and j values can be used for 
	 the output as well as helping the algorithm keep its place in the sort. Some 
	 algorithms need additional placeholder information, but these are simply kept 
	 as datamembers in the individual sort algorithm's class.









The general method behind using the sorting algorithm is as follows:

	1- 	create a new Algorithm object with the following constructor arguments:
		The First argument should always be TRUE unless you want the algorithm to not sort
		The Second argument is the choice of algorithm:
			1 = Insertion Sort
			2 = Bubble Sort
			3 = Quick Sort
			4 = Merge Sort
			There may be more but they havent been implemented yet.
		
		The Third argument is the speed of the steps in seconds (default is 0.025)
		The Fourth argument is the size of the data array that needs to be sorted.
		(generates 200 random numbers by default)
	
	2-	call Algorithm.step() in a loop.
	3-	update the output with every iteration of the step-loop.









A little more detail about the Algorithm Methods:



Algorithm() Methods:
	
		*constructor( 	sorting (default:TRUE), 
				algochoice (default: 1(insertionsort)),
				speed (default: 0.025),
				arrsize (default: 200)):

			creates the algo object depending on what algochoice is.
			creates the NumberList and State objects
			NumberList object originally contains randomly 
			generated integers of size <arrsize>.


		*reset(	algochoice (default: same algorithm already in use)):

			restarts the algorithm from the beginning with a new set of data. Also lets 				the user choose to use a different algorithm.
			otherwise. data is randomly generated, so export data to file before calling
			this method if you want to save it.

		
		*step():
			
			iterates the chosen algorithm once.
			it will update NumberList and State when it does.
			waits for <self.speed> seconds before exiting the method.

		*getState():
			
			returns the state object currently being used.
			the object can be used to retrieve the data stored in the state object

		*setData(int list):

			sets data to the list that is passed into this method.

		*getData()

			returns the integer list that is being sorted.

		*importData(string: filename)

			sets data to the list in the file named <filename> that is 
			passed into this method

		*exportData(string: filename)

			exports data in the list being sorted into a file named <filename>

		*setRandomData(size)

			sets data equal to a list of random integers of length <size>

		*getFormat()

			returns string containing the data formatted for display on commandline.

		
			





